4 + 3
exit
exit()
if 3 < 4:
print("it's true")
if 3 < 4:
print("it's true")
if 3 < 4:
print("it's true")
if 3 < 4:
print("it's true")
if 3 < 4:
print("it's true")
if 3 < 4:
 print("it's true)
if 3 < 4:
 print("asdf")
a = 5
b = 3
a + b
a
b
print("\name")
print(r"\name")
print("""This is first line """)
print("""This is first line
This is second line
""")
print("""\This is first line
""")
print("""\
This is first line
This is second line
""")
print("""\
This is 1st line
This is 2nd line\
""")
text = ('asdf '
'l;kj.')
text
quit()
print("{:d} Battery street".format(98))
print("{:d} Battery street, {}".format(98, "San Francisco"))
a = "Python is cool"
print(a[:6])
exit
exit()
print("Holberton School: {}".format(88+10))
exit()
print("Holberton School: {}".format(88+10))
exit()
import this
exit()
import py_compile
py_compile.compile("2-print.py")
exit()
import py_compile
py_compile.compile("main.py")
exit()
import py_compile
py_compile.compile("main.py")
ls
exit()
import py_compile
py_compile.compile("test.py")
exit()
num = 4
if num > 0
if num > 0:
 print(num + "asdf")
print("{} is negatve", num)
print(num, " is positive)
print(num, " is positive")
print(num, "is positive")
exit()
str = "sthing" + 2
num = 2
str = "string", num
print(str_
)
print(str)
str = '"string" num'
print(str)
str = "string" num
str = "string " + str(num)
string = "string " + str(num)
age = 23
message = "Happy " + str(age)
exit()
age = 23
message = "Happy " + str(age)
print(message)
exit()
12 % 10
-12 % 10
-5 % 4
-4 % 3
-5 % 7
-5 % 4
-2 % 8
-2 % 1
exit()
5 // 2
5 / 2
-5 // 2
-5 / 2
(int)2.5
int(2.5)
-5 % 2
-5 // 2
5 // 2
exit()
-7 % 3
exit()
str = {a:z}
for i in range(a, z):
 print(i)
for i in range(0, 10):
 print(i)
str = ['a'..'z']
str = ['a',..'z']
str = ['a',..,'z']
def letter_range(c1, c2)
def letter_range(c1, c2):
for c in range(ord(c1), ord(c2))
def letter_range(c1, c2):
 for c in range(ord(c1), ord(c2)):
  yield chr(c)
for c in letter_range('a', 'z')
for c in letter_range('a', 'z'):
 print(c)
def letter_range(c1, c2):
for c in letter_range('a', 'z'):
def letter_range(c1, c2):
 for c in letter_range('a', 'z'):
  yield chr(c)
for c in letter_range('a', 'z'):
def letter_range(c1, c2):
 for c in letter_range('a', 'z'):
  yield chr(c)
for c in letter_range('a', 'z'):
exit()
print(range('a', 'c'))
print(range('a', 'c'), end='')
print(range(1, 5))
for i in range(97, 108):
 print(chr(i))
for i in range(97, 208):
 print(chr(i))
for i in range(97, 118):
 print(chr(i))
for i in range(97, 122):
 print(chr(i))
print(chr(i) in range(97, 122))
print(chr(i), for i in range(97, 122))
print(chr(i) in range(97, 122))
print(i in range(97, 122))
print(range(97, 122))
print("range(97, 122)")
print(list(range(97, 122)))
print(list(range('a', 'z')))
print(chr(list(range(97, 122))))
print(list(range(97, 122)))
exit()
c = 'a'
if c == 'a':
 print(True)
if 'b' > c:
 print(True)
letter = 'B'
if b != letter:
 print(True)
if 'b' != letter:
 print(True)
if letter >= 'a' and letter <= 'z':
 print(True)
else:
 print(False)
str = "something"
for c in str:
 print(c, end='')
num = 2.4
print(14/10)
print(round(14/10))
print(round(-14/10))
print(-14 - round(-14/10) * 10)
print(14 - round(14/10) * 10)
exit()
for i in reverse(range(97, 123)):
 print(i, end='')
for i in reversed(range(97, 123)):
 print(i, end='')
exit()
str = "asdf"
for c in str:
 print(c)
string = "12345678"
i = 0
str = ""
for c in string:
 if i != 5:
  str[i] = c
  i = i + 1
print(str)
exit()
print('"as df')
number = 98
print("{:d} Battery Street". format(number))
print("{} Battery Street". format(number))
n = 3.1425
print("{:.2f}".format(n))
print("{:02f}".format(n))
print("{:2f}".format(n))
print("{:.02f}".format(n))
str1 = "Holberton"
str1 = str1 - str1[:2]
import sys
print(sys.argv)
exit()
import hidden_4.pyc
import hidden_4
for ar from hidden_4:
for ar in hidden_4:
 print(ar)
for ar in hidden_4.argv:
 print(ar)
print(hidden_4)
print(hidden_4.argv)
if __name__ = "__main__":
if __name__ == "__main__":
 import hidden_4
 print(somthing)
if __name__ == "__main__":
 import hidden_4
 print("somthing")
if __name__ == "__main__":
 import hidden_4
 print("{}".format(hidden_4.argv[1]))
exit
exit()
0-add.__name__
add_0.__name__
import add_0
add_0.__name__
import hidden_4
hidden_4.__name__
hidden_4.hidde_4
hidden_4.__name__
print(hidden_4.__name__)
dis.dis(hidden_4)
import dis
dis.dis(hidden_4)
import hidden_4
print(hidden_4.__name__)
bytecode = dis.Bytecode(hidden_4)
exit()
import dis
bytecode = dis.Bytecode(hidden_4)
import hidden_4
bytecode = dis.Bytecode(hidden_4)
bytecode = dis.info(hidden_4)
import dis
import hidden_4
bytecode = dis.info(hidden_4)
import dis
bytecode = dis.info(hidden_4)
import dis
import hidden_4
dis.hasname(hidden_4)
dis.dis(hidden_4)
dis.opname(hidden_4)
import dis
import hidden_4
bytecode = dis.Bytecode(hidden_4)
bytecode = dis.Bytecode(hidden_4.pyc)
dis.code_info()
dis.code_info(x)
dis.code_info(hidden_4)
dis.disassemble(hidden_4)
dis.disco(hidden_4)
dis.Instruction(hidden_4)
dis.Instruction.opname(hidden_4)
dis.dis(hidden_4)
dis.Bytecode(add_0)
import add_0
dis.Bytecode(add_0)
import dis
import add_0
dis.dis(add_0)
dis.Bytecode(add_0)
bytecode = dis.Bytecode(add_0)
exit
exit()
import dis
import add_0
bytecode = dis.Bytecode(add_0)
def myfunc(alist):
 return len(alist)
dis.dis(myfunc)
bytecode = dis.Bytecode(myfunc)
for instr in bytecode:
 print(instr.opcode)
for instr in bytecode:
 print(instr.arg)
for instr in bytecode:
 print(instr.starts_line)
exit
exit()
import dis
import hidden_4
did.dis(hidden_4)
dis.dis(hidden_4)
exit()
import dis
import hidden_4
bytecode = dis.Bytecode(hidden_4)
did.dis(hidden_4)
dis.dis(hidden_4)
dir(hidden_4)
dir(builtins)
dir(hidden_4)
for name in dir(hidden_4):
 if name[:2] != "__":
  print(name)
for name in sorted(dir(hidden_4)):
 if name[:2] != "__":
  print(name)
exit()
import add_0
dir(add_0)
dir()
exit()
import variable_load_5
dir(varriable_load_5)
dir(variable_load_5)
exit()
f.write("This is")
write(sys.stdout, "asdf", 4)
print("Asf"
)
sys.stdout,write("as\n")
return asdf
"Asdf"
"'asdf'"
asdf"
asdf
"asdf
"asf"
"#pythoniscool"
'#pythoniscool'
#pythoniscool
\#pythoniscool
\#pythoniscool\
\#pythoniscool/
print(#pythoniscool)
print(\#pythoniscool)
print("#pythoniscool")
which write
what write
where write
str = "asf"
printf("str")
echo "asdf" >1
echo "asdf" > stdout
dir("asdf")
repr("sa")
repr(as)
repr('as')
repr('#asdf')
str = "Asdf"
repr(str)
str("Asdf")
str()
from sys import stdout
sys.stdout.write("asdf")
import sys
sys.stdout.write("asdf")
from sys import stdout
stdout.write("Asf")
exit()
f'asdf'
year = 2016 ; event = 'Referendum'
f'Results of the {year} {event}'
F'Results of the {year} {event}'
{}.format("Asdf")
"{}".format("Asdf")
"{}".format(Asdf)
"{}".format("Asdf")
"Asdf"
\"asdf\"
year = 2016 ; event = 'Referendum'
f'Results of the {year} {event}'
f"Results of the {year} {event}"
f("Results of the {year} {event}")
exit()
year = 2016 ; event = 'Referendum'
f'Results of the {year} {event}'
str("asdf")
import os
os.write(1, "Asdf")
exit()
import os
os.write(1, b'line 3 to stdout  ')
exit()
os.write(1, b'line 3 to stdout  ')
write(1, b'line 3 to stdout  ')
import os
write(1, "Asdf")
os.write(1, "Asdf")
os.write(1, b"Asdf")
exit()
os.write(1, b"Asdf")
exit()
import dis
dis.dis(2-args)
import dis
import 2-args
import dis
dis.dis(2-args.py)
dis.dis(calculator_1)
import calculator_1
dis.dis(calculator_1)
import dis
dis.dis(magic_calculation(a, b, c)
)
dis.dis(102-magic_calculation)
dis.dis(magic_calculation)
import dis
dis.dis(magic_calculation)
import dis
import magic_calculation
import 102-magic_calculation
exit()
import dis
import 102-magic_calculation
dis.dis(magic_calculation)
exit()
import 102-magic_calculation
exit()
import magic
import dis
dis.dis(magic_calculation)
dis.dis(magic.magic_calculation)
exit()
import magic
import dis
import (magic.magic_calculation)
dis.dis(magic.magic_calculation)
exit()
import dis
import magic
dis.dis(magic.magic_calculation)
exit()
import dis
import magic
dis.dis(magic.magic_calculation)
import dis
import 2-print_alphabet
did.dis(2-print_alphabet)
import dis
import print_alpha
import printalph
dis.dis(printalph)
import dis
import printalph
dis.dis(printalph.print)
dis.dis(printalph.printa)
exit
exit()
./100-test.py
exit()
a = [1,2,3,4]
b = a
a[2] = 10
b
a
exit()
a = [[]]
len(a)
if not a:
 print(a)
if not a:
 print(1)
if not a[0]:
 print(1)
exit()
t = 1,
t[0]
t[1]
if not t[1]:
 print(1)
u = ()
len(u)
exit()
t = 1, 2
type(t)
print(type(t))
exit()
