# 0x0C. Python - Almost a circle

## Target

The AirBnB project is a big part of the Higher level curriculum. This project will help you be ready for it.

- What is Unit testing and how to implement it in a large project

- How to serialize and deserialize a Class

- How to write and read a JSON file

- What is *args and how to use it

- What is **kwargs and how to use it

- How to handle named arguments in a function

## Tasks

### 0. If it's not tested it doesn't work

All your files, classes and methods must be unit tested and be PEP 8 validated.

File: tests/

### 1. Base class

Write the first class Base:

Create a folder named models with an empty file __init__.py inside - with this file, the folder will become a Python module

Create a file named models/base.py:

- Class Base:

  - private class attribute __nb_objects = 0

  - class constructor: def __init__(self, id=None)::

    - if id is not None, assign the public instance attribute id to this argument value

    - otherwise, increment __nb_objects and assign the new value to the public instance attribute id

This class will be the “base” of all other classes in this project. The goal of it is to manage id attribute in all your future classes and to avoid duplicating the same code (by extension, same bugs)

File: models/base.py, models/__init__.py

### 2. First Rectangle

Write the class Rectangle that inherits from Base:

- In the file models/rectangle.py

- Class Rectangle inherits from Base

- Private instance attributes, each with its own public getter and setter:

  - __width -> width

  - __height -> height

  - __x -> x

  - __y -> y

- Class constructor: def __init__(self, width, height, x=0, y=0, id=None):

  - Call the super class with id - this super call with use the logic of the __init__ of the Base class

  - Assign each argument width, height, x and y to the right attribute

Why private attributes with getter/setter? Why not directly public attribute?

Because we want to protect attributes of our class. With a setter, you are able to validate what a developer is trying to assign to a variable. So after, in your class you can “trust” these attributes.

File: models/rectangle.py

### 3. Validate attributes

Update the class Rectangle by adding validation of all setter methods and instantiation (id excluded):

- If the input is not an integer, raise the TypeError exception with the message: <name of the attribute> must be an integer. Example: width must be an integer

- If width or height is under or equals 0, raise the ValueError exception with the message: <name of the attribute> must be > 0. Example: width must be > 0

- If x or y is under 0, raise the ValueError exception with the message: <name of the attribute> must be >= 0. Example: x must be >= 0

File: models/rectangle.py

### 4. Area first

Update the class Rectangle by adding the public method def area(self): that returns the area value of the Rectangle instance.

File: models/rectangle.py

### 5. Display #0

Update the class Rectangle by adding the public method def display(self): that prints in stdout the Rectangle instance with the character # - you don’t need to handle x and y here.

File: models/rectangle.py

### 6. __str__

Update the class Rectangle by overriding the __str__ method so that it returns [Rectangle] (<id>) <x>/<y> - <width>/<height>

File: models/rectangle.py

### 7. Display #1

Update the class Rectangle by improving the public method def display(self): to print in stdout the Rectangle instance with the character # by taking care of x and y

File: models/rectangle.py

### 8. Update #0

Update the class Rectangle by adding the public method def update(self, *args): that assigns an argument to each attribute:

- 1st argument should be the id attribute

- 2nd argument should be the width attribute

- 3rd argument should be the height attribute

- 4th argument should be the x attribute

- 5th argument should be the y attribute

This type of argument is called a “no-keyword argument” - Argument order is super important.

File: models/rectangle.py

### 9. Update #1

Update the class Rectangle by updating the public method def update(self, *args): by changing the prototype to update(self, *args, **kwargs) that assigns a key/value argument to attributes:

- **kwargs is a double pointer to a dictionary: key/value

- **kwargs must be skipped if *args exists and is not empty

- Each key in this dictionary represents an attribute to the instance

This type of argument is called a “key-worded argument”. Argument order is not important.

File: models/rectangle.py

### 10. And now, the Square!

Write the class Square that inherits from Rectangle:

- In the file models/square.py

- Class Square inherits from Rectangle

- Class constructor: def __init__(self, size, x=0, y=0, id=None)::

  - Call the super class with id, x, y, width and height - this super call will use the logic of the __init__ of the Rectangle class. The width and height must be assigned to the value of size

  - You must not create new attributes for this class, use all attributes of Rectangle - As reminder: a Square is a Rectangle with the same width and height

  - All width, height, x and y validation must inherit from Rectangle - same behavior in case of wrong data
 - The overloading __str__ method should return [Square] (<id>) <x>/<y> - <size> - in our case, width or height

As you know, a Square is a special Rectangle, so it makes sense this class Square inherits from Rectangle. Now you have a Square class who has the same attributes and same methods.

File: models/square.py

### 11. Square size

Update the class Square by adding the public getter and setter size

- The setter should assign (in this order) the width and the height - with the same value

- The setter should have the same value validation as the Rectangle for width and height - No need to change the exception error message (It should be the one from width)

models/square.py

### 12. Square update

Update the class Square by adding the public method def update(self, *args, **kwargs) that assigns attributes:

- *args is the list of arguments - no-keyworded arguments

  - 1st argument should be the id attribute

  - 2nd argument should be the size attribute

  - 3rd argument should be the x attribute

  - 4th argument should be the y attribute

- **kwargs is a double pointer to a dictionary: key/value (keyworded arguments)
- **kwargs must be skipped if *args exists and is not empty

- Each key in this dictionary represents an attribute to the instance

File models/square.py

### 13. Rectangle instance to dictionary representation

Update the class Rectangle by adding the public method def to_dictionary(self): that returns the dictionary representation of a Rectangle:

This dictionary must contain:

- id

- width

- height

- x

- y

File: models/rectangle.py

### 14. Square instance to dictionary representation

Update the class Square by adding the public method def to_dictionary(self): that returns the dictionary representation of a Square:

This dictionary must contain:

- id

- size

- x

- y

File: models/square.py

### 15. Dictionary to JSON string

JSON is one of the standard formats for sharing data representation.

Update the class Base by adding the static method def to_json_string(list_dictionaries): that returns the JSON string representation of list_dictionaries:

- list_dictionaries is a list of dictionaries

- If list_dictionaries is None or empty, return the string: "[]"

- Otherwise, return the JSON string representation of list_dictionaries

File: models/base.py

### 16. JSON string to file

Update the class Base by adding the class method def save_to_file(cls, list_objs): that writes the JSON string representation of list_objs to a file:

- list_objs is a list of instances who inherits of Base - example: list of Rectangle or list of Square instances

- If list_objs is None, save an empty list

- The filename must be: <Class name>.json - example: Rectangle.json

- You must use the static method to_json_string (created before)

- You must overwrite the file if it already exists